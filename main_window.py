# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'templates/mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import webbrowser
from PyQt5.QtCore import QDir
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QDialog, QWidget, QLabel, QPushButton, QVBoxLayout, QComboBox
import re
import sys
import os
from JS.scanner import Scanner as js_scanner
from JS.token import Token as js_token
from JS.parser import JSParser as js_parser
from CSS.scanner import Scanner as css_scanner
from HTML.scanner import Scanner as html_scanner

class Error:
    def __init__(self, value,error):
        self.error = error
        self.value = value
    def get_error(self):
        return self.error
    def get_value(self):
        return self.value

class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(710, 455)

        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(143, 89, 2))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(66, 93, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(55, 77, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(29, 41, 53))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 62, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(143, 89, 2))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(66, 93, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(55, 77, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(29, 41, 53))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 62, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.PlaceholderText, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(143, 89, 2))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(66, 93, 120))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(55, 77, 100))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(29, 41, 53))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 62, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 62, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 62, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 128))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.PlaceholderText, brush)
        MainWindow.setPalette(palette)
        MainWindow.setAutoFillBackground(False)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(20, 370, 671, 31))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)

        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.scan_input)

        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setGeometry(QtCore.QRect(380, 70, 311, 291))
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 309, 289))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")

        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.scrollAreaWidgetContents)
        self.plainTextEdit.setGeometry(QtCore.QRect(0, 0, 311, 291))
        self.plainTextEdit.setReadOnly(True)
        self.plainTextEdit.setObjectName("plainTextEdit")

        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.scrollArea_2 = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea_2.setGeometry(QtCore.QRect(20, 70, 351, 291))
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_2 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_2.setGeometry(QtCore.QRect(0, 0, 349, 289))
        self.scrollAreaWidgetContents_2.setObjectName("scrollAreaWidgetContents_2")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.scrollAreaWidgetContents_2)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(0, 0, 351, 291))

        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(238, 238, 236))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(22, 31, 40))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(44, 62, 80))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)

        self.plainTextEdit_2.setPalette(palette)
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_2)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(270, 10, 161, 51))

        self.combobox = QtWidgets.QComboBox(self.centralwidget)
        self.combobox.addItem("JAVASCRIPT")
        self.combobox.addItem("CSS")
        self.combobox.addItem("HTML")
        self.combobox.addItem("PARSER JS")
        self.combobox.setGeometry(QtCore.QRect(525, 15, 161, 51))



        font = QtGui.QFont()
        font.setFamily("Ubuntu Condensed")
        font.setPointSize(36)
        font.setBold(True)
        font.setWeight(75)

        self.combobox.setObjectName("ComboBox")



        self.label.setFont(font)
        self.label.setObjectName("label")

        MainWindow.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 710, 22))
        self.menubar.setObjectName("menubar")
        self.menuArchivo = QtWidgets.QMenu(self.menubar)
        self.menuArchivo.setObjectName("menuArchivo")

        self.menuReports = QtWidgets.QMenu(self.menubar)
        self.menuReports.setObjectName("menuReports")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew = QtWidgets.QAction(MainWindow)
        self.actionNew.setObjectName("actionNew")
        self.actionNew.triggered.connect(self.clear_screen)

        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen.triggered.connect(self.get_file)


        self.actionSave_As = QtWidgets.QAction(MainWindow)
        self.actionSave_As.setObjectName("actionSave_As")
        self.actionSave_As.triggered.connect(self.file_save_as)

        self.actionAnalyze = QtWidgets.QAction(MainWindow)
        self.actionAnalyze.setObjectName("actionAnalyze")
        self.actionAnalyze.triggered.connect(self.scan_input)

        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionExit.triggered.connect(lambda: sys.exit())

        self.menuArchivo.addSeparator()
        self.menuArchivo.addAction(self.actionNew)
        self.menuArchivo.addAction(self.actionOpen)
        self.menuArchivo.addAction(self.actionSave_As)
        self.menuArchivo.addAction(self.actionAnalyze)
        self.menuArchivo.addAction(self.actionExit)
        self.menubar.addAction(self.menuArchivo.menuAction())
        self.menubar.addAction(self.menuReports.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.parser_errors = []
        self.js_num = 1
        self.css_num = 1
        self.html_num = 1

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def clear_screen(self):
        self.plainTextEdit.clear()
        self.plainTextEdit_2.clear()
    def scan_input(self):
        data = str(self.plainTextEdit_2.toPlainText())
        console = str(self.plainTextEdit.toPlainText())
        words = console.split()
        new_scanner = ""
        txt = self.combobox.currentText()
        if txt == 'HTML':
            new_scanner = html_scanner()
            new_scanner.scan(data)
            if len(new_scanner.error_list):
                for error in new_scanner.error_list:
                    self.plainTextEdit.appendPlainText('>> ' + error.get_message())
                self.error_html(new_scanner.error_list)
            self.generate_html(new_scanner.token_list)
            self.generate_file(new_scanner.dataAux, new_scanner.route, 'html')

            #data = data.replace(' ','')
        elif txt == 'CSS':
            new_scanner = css_scanner()
            transitions = new_scanner.transitions_list
            new_scanner.scan(data)
            for transition in transitions:
                value = transition.get_value()
                value = value.replace('\t','')
                self.plainTextEdit.appendPlainText('>> ' + value + ' Estado: ' + str(transition.get_state()))
            if len(new_scanner.error_list):
                for error in new_scanner.error_list:
                    self.plainTextEdit.appendPlainText('>> ' + error.get_message())
                self.error_html(new_scanner.error_list)
            self.generate_html(new_scanner.token_list)
            self.generate_file(new_scanner.dataAux, new_scanner.route, 'css')
        elif txt == 'JAVASCRIPT':
            new_scanner = js_scanner()
            new_scanner.scan(data)
            token_list = new_scanner.token_list
            if len(new_scanner.error_list):
                for error in new_scanner.error_list:
                    self.plainTextEdit.appendPlainText('>> ' + error.get_message())
                self.error_html(new_scanner.error_list)
            self.generate_html(new_scanner.token_list)
            if len(new_scanner.route) != 0:
                self.generate_file(new_scanner.dataAux, new_scanner.route, 'js')
        elif txt == 'PARSER JS':
            data = data.splitlines()
            for line in data:
                new_scanner = js_scanner()
                new_scanner.scan(line)
                new_scanner.token_list.append(js_token('LAST', '', 0, 0))
                token_list = new_scanner.token_list
                new_parser = js_parser()
                new_parser.parse(token_list)
                if len(new_parser.error_list):
                    for error in new_parser.error_list:
                        new_error = Error(line, 'Inválido')
                        self.parser_errors.append(new_error)
                        self.plainTextEdit.appendPlainText('>> Se esperaba ' + error.get_error())
                else:
                    new_error = Error(line, 'Válido')
                    self.parser_errors.append(new_error)
                    self.plainTextEdit.appendPlainText('>> Entrada correcta')
            if len(self.parser_errors):
                self.parser_html()
        else:
            self.plainTextEdit.appendPlainText('>> Archivo no válido. Intente de nuevo.')

    def get_file(self):
        dlg = QFileDialog()
        dlg.setFileMode(QFileDialog.AnyFile)
        dlg.setFilter(QDir.Files)
        if dlg.exec_():
            file_name = dlg.selectedFiles()
            if file_name[0].endswith('.js'):
                with open(file_name[0], 'r') as f:
                    # input for the scanner
                    str = f.read()

                    self.plainTextEdit_2.clear()
                    self.plainTextEdit.clear()
                    self.plainTextEdit.appendPlainText('>> JavaScript File')
                    # New scanner to analyze input
                    new_scanner = js_scanner()
                   # new_scanner.scan(str)
                    x = str.splitlines()
                    for line in x:
                        y = line.rsplit(' ')
                        for word in y:
                            word = word.lstrip('\t')

                    for error in new_scanner.error_list:
                        self.plainTextEdit.appendPlainText('>> '+ error.get_message())
                    if len(new_scanner.error_list):
                        self.error_html(new_scanner.error_list)
                    if len(new_scanner.token_list):
                        self.generate_html(new_scanner.token_list)
                    self.plainTextEdit_2.insertPlainText(str)
                    f.close()
            elif file_name[0].endswith('.css'):
                with open(file_name[0], 'r') as f:
                    str = f.read()
                    self.plainTextEdit_2.clear()
                    self.plainTextEdit.clear()
                    self.plainTextEdit.appendPlainText('>> CSS File')
                    new_scanner = css_scanner()
                   # new_scanner.scan(str)
                    x = str.splitlines()
                    for line in x:
                        y = line.rsplit(' ')
                        for word in y:
                            word = word.lstrip('\t')
                    for error in new_scanner.error_list:
                        self.plainTextEdit.appendPlainText('>> '+ error.get_message())
                    if len(new_scanner.error_list):
                        self.error_html(new_scanner.error_list)
                    if len(new_scanner.token_list):
                        self.generate_html(new_scanner.token_list)
                    self.plainTextEdit_2.insertPlainText(str)
                    f.close()
            elif file_name[0].endswith('.html'):
                with open(file_name[0], 'r') as f:
                    str = f.read()
                    self.plainTextEdit_2.clear()
                    self.plainTextEdit.clear()
                    self.plainTextEdit.appendPlainText('>> HTML File')
                    new_scanner = css_scanner()
                   # new_scanner.scan(str)
                    x = str.splitlines()
                    for line in x:
                        y = line.rsplit(' ')
                        for word in y:
                            word = word.lstrip('\t')
                    for error in new_scanner.error_list:
                        self.plainTextEdit.appendPlainText('>> ' + error.get_message())
                    if len(new_scanner.error_list):
                        self.error_html(new_scanner.error_list)
                    if len(new_scanner.token_list):
                        self.generate_html(new_scanner.token_list)
                    self.plainTextEdit_2.insertPlainText(str)
                    f.close()
            elif file_name[0].endswith('.rmt'):
                with open(file_name[0], 'r') as f:
                    data = f.read()
                    self.plainTextEdit_2.clear()
                    self.plainTextEdit.clear()
                    self.plainTextEdit.appendPlainText('>> RMT File')
                    new_scanner = js_scanner()
                    self.plainTextEdit_2.insertPlainText(data)
                    print(data)
                    data = data.splitlines()
                    for line in data:
                        new_scanner = js_scanner()
                        new_scanner.scan(line)
                        new_scanner.token_list.append(js_token('LAST', '', 0, 0))
                        token_list = new_scanner.token_list
                        new_parser = js_parser()
                        new_parser.parse(token_list)
                        if len(new_parser.error_list):
                            for error in new_parser.error_list:
                                new_error = Error(line, 'Inválido')
                                self.parser_errors.append(new_error)
                                self.plainTextEdit.appendPlainText('>> Se esperaba ' + error.get_error())
                        else:
                            new_error = Error(line, 'Válido')
                            self.parser_errors.append(new_error)
                            self.plainTextEdit.appendPlainText('>> Entrada correcta')
                    if len(self.parser_errors):
                        self.parser_html()
                    f.close()
            else:
                print('File extension is not correct')
                self.openSecondDialog()
                pass

    def file_save_as(self):
        name = QFileDialog.getSaveFileName(self, 'Save File')
        file = open(name[0], 'w')
        text = self.plainTextEdit_2.toPlainText()
        file.write(text)
        file.close()

    def generate_file(self, data, route, type):
        if route == '':
            print("No route specified.")
            return
        try:
            # Create target Directory
            os.makedirs(route)
            print("Directory ", route, " Created ")
        except FileExistsError:
            print("Directory ", route, " already exists")
        f = ''
        if type == 'js':
            f  = open(route + 'corregido'+ str(self.js_num) +'.js', 'x')
            self.js_num += 1
        elif type == 'css':
            f  = open(route + 'corregido'+ str(self.css_num) +'.css', 'x')
            self.css_num += 1
        elif type == 'html':
            f  = open(route + 'corregido'+ str(self.html_num) +'.html', 'x')
            self.html_num += 1
        for line in data:
            f.write(line)
        f.close()

    def error_html(self, errors):
        f = open('errors.html', 'w+')
        html = '''
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootswatch/4.5.2/flatly/bootstrap.min.css" integrity="sha384-qF/QmIAj5ZaYFAeQcrQ6bfVMAh4zZlrGwTPY7T/M+iTTLJqJBJjwwnsE5Y0mV7QK" crossorigin="anonymous">
                        <link rel="stylesheet" href="styles/main.css">
                        <title>Tabla de Errores</title>
                    </head>
                    <body>
                        <div class="container">
                        <h1>Tabla de Errores</h1>
                        <table class="table table-striped">
                          <thead class="thead-dark">
                            <tr>
                              <th scope="col">Num.</th>
                              <th scope="col">Error</th>
                            </tr>
                          </thead>
                          <tbody>
                          '''
        f.writelines(html)
        i = 1
        for error in errors:
            f.writelines('<tr>')
            f.writelines('<td>' + str(i) + '</td>')
            f.writelines('<td>' + error.get_message() + '</td>')
            f.writelines('</tr>')
            i = i + 1
        html_end = '''
                        </tbody>
                          </table>
                          </div>
                    </body>
                    </html>
                '''
        f.writelines(html_end)
        f.close()
        url = 'file://'+os.path.dirname(os.path.abspath(__file__)) + '/errors.html'
        print(url)
        webbrowser.open(url, new = 2)

    def parser_html(self):
        f = open('errors.html', 'w+')
        html = '''
                    <!DOCTYPE html>
                    <html lang="en">
                    <head>
                        <meta charset="UTF-8">
                        <meta name="viewport" content="width=device-width, initial-scale=1.0">
                        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootswatch/4.5.2/flatly/bootstrap.min.css" integrity="sha384-qF/QmIAj5ZaYFAeQcrQ6bfVMAh4zZlrGwTPY7T/M+iTTLJqJBJjwwnsE5Y0mV7QK" crossorigin="anonymous">
                        <link rel="stylesheet" href="styles/main.css">
                        <title>Reporte Parser</title>
                    </head>
                    <body>
                        <div class="container">
                        <h1>Reporte Parser</h1>
                        <table class="table table-striped">
                          <thead class="thead-dark">
                            <tr>
                              <th scope="col">Num.</th>
                            <th scope="col">Valor</th>
                              <th scope="col">Análisis</th>
                            </tr>
                          </thead>
                          <tbody>
                          '''
        f.writelines(html)
        i = 1
        for error in self.parser_errors:
            f.writelines('<tr>')
            f.writelines('<td>' + str(i) + '</td>')
            f.writelines('<td>' + str(error.get_value()) + '</td>')
            f.writelines('<td>' + str(error.get_error()) + '</td>')
            f.writelines('</tr>')
            i = i + 1
        html_end = '''
                        </tbody>
                          </table>
                          </div>
                    </body>
                    </html>
                '''
        f.writelines(html_end)
        f.close()
        url = 'file://'+os.path.dirname(os.path.abspath(__file__)) + '/errors.html'
        print(url)
        webbrowser.open(url, new = 2)

    def generate_html(self, tokens):
        f = open('tokens.html', 'w+')
        html = '''
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootswatch/4.5.2/flatly/bootstrap.min.css" integrity="sha384-qF/QmIAj5ZaYFAeQcrQ6bfVMAh4zZlrGwTPY7T/M+iTTLJqJBJjwwnsE5Y0mV7QK" crossorigin="anonymous">
                <link rel="stylesheet" href="styles/main.css">
                <title>Tabla de Tokens</title>
            </head>
            <body>
                <div class="container">
                <h1>Tabla de Tokens</h1>
                <table class="table table-striped">
                  <thead class="thead-dark">
                    <tr>
                      <th scope="col">Token</th>
                      <th scope="col">Lexema</th>
                      <th scope="col">Columna</th>
                      <th scope="col">Fila</th>
                    </tr>
                  </thead>
                  <tbody>
                  '''
        f.writelines(html)
        for token in tokens:
            f.writelines('<tr>')
            f.writelines('<td>' + token.get_type() + '</td>')
            f.writelines('<td>' + token.get_value() + '</td>')
            f.writelines('<td>' + token.get_column() + '</td>')
            f.writelines('<td>' + token.get_row() + '</td>')
            f.writelines('</tr>')
        html_end = '''
                </tbody>
                  </table>
                  </div>
            </body>
            </html>
        '''
        f.writelines(html_end)
        f.close()
        url = 'file://' + os.path.dirname(os.path.abspath(__file__)) + '/tokens.html'
        print(url)
        webbrowser.open(url, new=3)


    def openSecondDialog(self):
        layout = QVBoxLayout()
        mydialog = QDialog(self)
        mydialog.setWindowTitle("Error")
        button = QPushButton("Ok")
        button.clicked.connect(lambda: mydialog.close())
        error_label = QLabel("La extensión del archivo no es válida.")
        layout.addWidget(error_label)
        layout.addWidget(button)
        mydialog.setLayout(layout)
        mydialog.show()


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "ML Web Tool"))
        self.pushButton.setText(_translate("MainWindow", "Scan"))
        self.label.setText(_translate("MainWindow", "ML WEB"))
        self.menuArchivo.setTitle(_translate("MainWindow", "File"))
        self.menuReports.setTitle(_translate("MainWindow", "Reports"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionNew.setText(_translate("MainWindow", "New"))
        self.actionOpen.setText(_translate("MainWindow", "Open"))
        self.actionSave_As.setText(_translate("MainWindow", "Save As"))
        self.actionAnalyze.setText(_translate("MainWindow", "Analyze"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
